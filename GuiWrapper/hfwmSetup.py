"""
This is the External wrapper for handling Heterodyne Four Wave Mixing callbacks 

Generated By Matthew Larson on November 8th 2023
"""

import dearpygui.dearpygui as dpg 
import numpy as np 
import matplotlib.pyplot as plt 
import time as t 
from lockinControl import *

def runHFWM(sender,data,userdata):
    device,session = connect()
    stagea = dpg.get_value(userdata[0])
    stageb = dpg.get_value(userdata[1])
    speeda = dpg.get_value(userdata[2])
    speedb = dpg.get_value(userdata[3])
    sunita = dpg.get_value(userdata[4])
    sunitb = dpg.get_value(userdata[5])
    starta = dpg.get_value(userdata[6])
    startb = dpg.get_value(userdata[7])
    enda = dpg.get_value(userdata[8])
    endb = dpg.get_value(userdata[9])
    stepsa = dpg.get_value(userdata[10])
    stepsb = dpg.get_value(userdata[11])
    unita = dpg.get_value(userdata[12])
    unitb = dpg.get_value(userdata[13])
    pb = userdata[14]
    textureid = userdata[15]
    inttime = dpg.get_value(userdata[17])
    x= np.linspace(starta,enda,int(stepsa))
    y= np.linspace(startb,endb,int(stepsb))
    global z
    ztemp=np.zeros((int(stepsa),int(stepsb)))
    print(np.shape(ztemp))
    xaxis=np.flip(x)
    ztemp= np.append(ztemp,[xaxis],axis=0)
    ztemp=np.flipud(ztemp)
    print(np.shape(ztemp))
    yaxis =np.append(0,y)[np.newaxis]
    yaxis = yaxis.transpose()
    ztemp= np.append(ztemp,yaxis,axis=1)
    ztemp=np.fliplr(ztemp)
    print(np.shape(ztemp))
    fig,ax =plt.subplots()
    fig.set_dpi(100)
    fig.set_figwidth(5.0)
    fig.set_figheight(2.2)
    for i,xi in enumerate(x):
        for j,yi in enumerate(y): 
            ztemp[i+1,j+1] = len(polldata(device,session,inttime))
        if( i%1==0 ):
            ax.imshow(ztemp,extent=[starta,enda,startb,endb])
            fig.savefig('updatedimage.png',dpi=100)
            #t.sleep(.1)
            width, height, channels, data = dpg.load_image("updatedimage.png")
            dpg.set_value(textureid,data)
        dpg.set_value(pb,(i+1)/stepsa)
        z=ztemp
        
    ax.imshow(ztemp,extent=[starta,enda,startb,endb])
    fig.savefig('updatedimage.png',dpi=100)
    #t.sleep(.1)
    width, height, channels, data = dpg.load_image("updatedimage.png")
    dpg.set_value(textureid,data)
    

    print('done')
def savefile(sender,data,userdata):
    global z
    print('saving file to: ', data['file_path_name'])
    np.savetxt(data['file_path_name'],z,delimiter=';')    
def savecanceled(sender,data,userdata):
    print('save Attempt canceled')
    print(data)